Index: setup.py
===================================================================
--- setup.py	(r√©vision 75204)
+++ setup.py	(copie de travail)
@@ -361,7 +361,10 @@
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
-        lib_dirs = self.compiler.library_dirs + [
+        mlib_dirs = []
+        for i in os.environ.get('LD_RUN_PATH', '').split(':'):
+            mlib_dirs.append(i)
+        lib_dirs = mlib_dirs + self.compiler.library_dirs + [
             '/lib64', '/usr/lib64',
             '/lib', '/usr/lib',
             ]
@@ -561,9 +564,9 @@
             # the readline module unless the user has installed a fixed
             # readline package
             # FIXME: The readline emulation on 10.5 is better, but the
-            # readline module doesn't compile out of the box.
-            if find_file('readline/rlconf.h', inc_dirs, []) is None:
-                do_readline = False
+            print 'readline module doesn\'t compile out of the box except inside minitage :).'
+#            if find_file('readline/rlconf.h', inc_dirs, []) is None:
+#                do_readline = False
         if do_readline:
             if sys.platform == 'darwin':
                 # In every directory on the search path search for a dynamic
@@ -595,7 +598,7 @@
         else:
             missing.append('readline')
 
-        if platform not in ['mac']:
+        if platform not in ['compile otb on minitage :)']:
             # crypt module.
 
             if self.compiler.find_library_file(lib_dirs, 'crypt'):
@@ -633,8 +636,9 @@
         if (ssl_incs is not None and
             ssl_libs is not None):
             exts.append( Extension('_ssl', ['_ssl.c'],
-                                   include_dirs = ssl_incs,
-                                   library_dirs = ssl_libs,
+                                   # they are already in compilation flags when building with minitage
+                                   #include_dirs = ssl_incs,
+                                   #library_dirs = ssl_libs,
                                    libraries = ['ssl', 'crypto'],
                                    depends = ['socketmodule.h']), )
         else:
@@ -872,9 +876,10 @@
             # is on an NFS server that goes away).
             exts.append(Extension('_bsddb', ['_bsddb.c'],
                                   depends = ['bsddb.h'],
-                                  library_dirs=dblib_dir,
-                                  runtime_library_dirs=dblib_dir,
-                                  include_dirs=db_incs,
+                                  # defined by minitage
+                                  #library_dirs=dblib_dir,
+                                  #runtime_library_dirs=dblib_dir,
+                                  #include_dirs=db_incs,
                                   libraries=dblibs))
         else:
             if db_setup_debug: print "db: no appropriate library found"
@@ -1108,8 +1113,8 @@
             missing.append('_curses')
 
         # If the curses module is enabled, check for the panel module
-        if (module_enabled(exts, '_curses') and
-            self.compiler.find_library_file(lib_dirs, panel_library)):
+        if (module_enabled(exts, '_curses')): # always true on minitage and
+            #self.compiler.find_library_file(lib_dirs, panel_library)):
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
                                    libraries = [panel_library] + curses_libs) )
         else:
@@ -1203,7 +1208,10 @@
 
         exts.append(Extension('pyexpat',
                               define_macros = define_macros,
-                              include_dirs = [expatinc],
+                              # defined by minitage
+                              # include_dirs = [expatinc],
+                              # force link against minitage expat
+                              libraries = ['expat'],
                               sources = ['pyexpat.c',
                                          'expat/xmlparse.c',
                                          'expat/xmlrole.c',
@@ -1218,7 +1226,10 @@
             define_macros.append(('USE_PYEXPAT_CAPI', None))
             exts.append(Extension('_elementtree',
                                   define_macros = define_macros,
-                                  include_dirs = [expatinc],
+                                  # defined by minitage
+                                  # include_dirs = [expatinc],
+                                  # force link against minitage expat
+                                  libraries = ['expat'],
                                   sources = ['_elementtree.c'],
                                   ))
         else:
